services:
  # rabbitmq:
  #   image: rabbitmq:3.13.4-management-alpine
  #   hostname: rabbitmq
  #   volumes:
  #     - /var/lib/rabbitmq
  #   ports:
  #     - '5672:5672'
  #     - '15672:15672'
  #   env_file:
  #     - .env.development
  #   healthcheck:
  #     test: [ "CMD", "rabbitmqctl", "status" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      target: development
    command: pnpm run start:dev api
    env_file:
      - ./apps/api/.env.development
    ports:
      - '1111:1111'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    #   rabbitmq:
    #     condition: service_healthy

  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: pnpm run start:dev auth
    env_file:
      - ./apps/auth/.env.development
    ports:
      - '2222:2222'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy

  patient:
    build:
      context: .
      dockerfile: ./apps/patient/Dockerfile
      target: development
    command: pnpm run start:dev patient
    env_file:
      - ./apps/patient/.env.development
    ports:
      - '3333:3333'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    #   rabbitmq:
    #     condition: service_healthy

  db:
    image: postgres:latest
    env_file:
      - .env.development
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
